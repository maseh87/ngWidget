{"version":3,"sources":["easy-directive.coffee"],"names":[],"mappings":"AAAA,OAAO,CAAC,MAAR,CAAgB,UAAhB,EAA2B,EAA3B,CAEA,CAAC,QAFD,CAEW,QAFX,EAEoB,SAAA,GAAA;AAElB,MAAA,8CAAA;AAAA,EAAA,MAAA,GAAS,EAAT,CAAA;AAAA,EAIA,QAAA,GACE;AAAA,IAAA,QAAA,EAAW,qDAAX;AAAA,IACA,IAAA,EAAM,SAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,GAAA;AAEJ,MAAA,OAAO,CAAC,OAAR,CAAgB,MAAhB,EAAwB,SAAC,KAAD,EAAQ,GAAR,GAAA;eACtB,IAAI,CAAC,EAAL,CAAQ,GAAR,EAAa,KAAb,EADsB;MAAA,CAAxB,CAAA,CAAA;aAIA,KAAK,CAAC,GAAN,CAAW,UAAX,EAAsB,SAAA,GAAA;eAEpB,OAAO,CAAC,OAAR,CAAgB,KAAhB,EAAuB,SAAC,KAAD,EAAQ,GAAR,GAAA;iBACrB,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,KAAd,EADqB;QAAA,CAAvB,EAFoB;MAAA,CAAtB,EANI;IAAA,CADN;AAAA,IAYA,UAAA,EAAY,KAZZ;AAAA,IAaA,QAAA,EAAW,IAbX;AAAA,IAcA,QAAA,EAAU,SAAC,QAAD,GAAA,CAdV;AAAA,IAeA,EAAA,EAAI,SAAC,KAAD,EAAQ,QAAR,GAAA;aAEF,MAAM,CAAC,KAAP,GAAe,SAFb;IAAA,CAfJ;GALF,CAAA;AAAA,EAyBA,WAAA,GAAc,SAAA,GAAA;WACZ,OAAO,CAAC,MAAR,CAAe,IAAf,EAAkB,QAAlB,EADY;EAAA,CAzBd,CAAA;AA6BA,SAAO,eAAA,GACL;AAAA,IAAA,IAAA,EAAM,SAAA,GAAA;aACJ,YADI;IAAA,CAAN;AAAA,IAGA,WAAA,EAAa,SAAC,MAAD,GAAA;aACX,OAAO,CAAC,MAAR,CAAe,QAAf,EAAyB,MAAzB,EADW;IAAA,CAHb;GADF,CA/BkB;AAAA,CAFpB,CAAA,CAAA","file":"easy-directive.js","sourceRoot":"/source/","sourcesContent":["angular.module 'ngWidget', []\n\n.provider 'Widget', ->\n\n  events = {}\n\n\n  # Default properties for the directive\n  defaults =\n    template: '<div>Default ngWidget template, go change it!</div>'\n    link: (scope, elem, attrs)->\n      # Iterate through an object of events and callbacks passing each one into elem.on\n      angular.forEach events, (value, key)->\n        elem.on key, value\n\n      # Listen for the $destroy event to clean up\n      scope.$on '$destroy', ->\n        #then iterate through the elements and call element.off on each event\n        angular.forEach event, (value, key)->\n          elem.off key, value\n\n    transclude: false\n    restrict: 'EA'\n    isoScope: (scopeObj)->\n    on: (event, callback)->\n      # store the users events in the events object to use in the link function\n      events.event = callback\n\n  # Extends @ with the defaults object\n  MyDirective = ->\n    angular.extend @, defaults\n\n  # Object to return for the injector\n  return directiveObject =\n    $get: ->\n      MyDirective\n    # Option for the config block of the user to overwrite the defaults\n    setDefaults: (config)->\n      angular.extend defaults, config\n"]}